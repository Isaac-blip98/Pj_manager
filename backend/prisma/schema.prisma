// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmailStatus {
  SENT
  NOT_SENT
  PENDING
  PROCESSING
  FAILED
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum NotificationType {
  DEADLINE_NEAR
  OVERDUE
  STALE
}

model User {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(200)
  email           String         @unique @db.VarChar(150)
  password        String         @db.VarChar(200)
  profileImage    String?        @map("profile_image") @db.VarChar(255)
  role            UserRole       @default(USER)
  emailStatus     EmailStatus    @default(NOT_SENT) @map("email_status")
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  assignedProject Project?       @relation(fields: [projectId], references: [id])
  projects        Project[]      @relation("UserProjects")
  notifications   Notification[]
  projectId       String?

  @@map("users")
}

model Project {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?        @db.Text
  startDate     DateTime       @map("start_date")
  endDate       DateTime       @map("end_date")
  status        ProjectStatus  @default(IN_PROGRESS)
  emailStatus   EmailStatus    @default(NOT_SENT) @map("email_status")
  assigneeId    String?        @map("assignee_id")
  assignee      User?          @relation("UserProjects", fields: [assigneeId], references: [id])
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  notifications Notification[]
  User          User[]

  @@map("projects")
}

model Notification {
  id        String              @id @default(uuid())
  userId    String              @map("user_id")
  type      NotificationType
  message   String              @db.Text
  projectId String              @map("project_id")
  read      Boolean             @default(false)
  createdAt DateTime            @default(now()) @map("created_at")
  user      User                @relation(fields: [userId], references: [id])
  project   Project             @relation(fields: [projectId], references: [id])

  @@map("notifications")
}

model EmailQueue {
  id          String      @id @default(uuid())
  to          String
  subject     String
  template    String
  context     String      @db.Text
  status      EmailStatus @default(PENDING)
  error       String?     @db.Text
  createdAt   DateTime    @default(now()) @map("created_at")
  processedAt DateTime?   @map("processed_at")
  retries     Int        @default(0)

  @@map("email_queue")
}
