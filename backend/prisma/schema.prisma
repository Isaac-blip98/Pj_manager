// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Permission {
  READ_PROJECTS
  CREATE_PROJECTS
  UPDATE_PROJECTS
  DELETE_PROJECTS
  MANAGE_USERS
  MANAGE_PROJECTS
  VIEW_OWN_PROJECT
  UPDATE_OWN_PROJECT
}

model Role {
  id          String           @id @default(uuid())
  name        UserRole         @unique
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id         String     @id @default(uuid())
  roleId     String     @map("role_id")
  permission Permission
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permission])
  @@map("role_permissions")
}

model User {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(200)
  email           String    @unique @db.VarChar(150)
  password        String    @db.VarChar(200)
  profileImage    String?   @map("profile_image") @db.VarChar(255)
  roleId          String    @map("role_id")
  role            Role      @relation(fields: [roleId], references: [id])
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  assignedProject Project?

  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(200)
  description String?
  endDate     DateTime      @map("end_date")
  status      ProjectStatus @default(PENDING)
  assigneeId  String?       @unique @map("assignee_id")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  assignee    User?        @relation(fields: [assigneeId], references: [id])

  @@map("projects")
}